最終更新:19/10/17

現在、このプロジェクトでは2つの譜面記述形式が混在しています。
その2つの譜面記述形式をここで軽く説明します。
ただ、将来的にエディタで作成する事になる為、このメモ書きの意味は薄いですが。。。

1, 譜面記述形式一覧
MusicManager.cs内の、DataTypeというenumを参照してください。

STM -->	StepManiaライクな形式
BSS -->	BeatSaberライクな形式

まとめ:ここで理解できる人重度の音ゲーマーもしくは開発者説。

2, 譜面記述形式詳細
ここでは、同じ譜面を作る際、どのような書き方になるかを解説。
(○○ライクという書き方をしてる形式については、その譜面やリファレンスを見た方が早いかも)

共通項

"#"で始まる行は、タグとみなされる。
"#"直後にタグ名を記入し、その直後に":"を入れて中身の記述を開始、最後に";"を入れる。
例: #DATATYPE:STM;
#DATATYPE 	--> 	譜面記述形式を宣言
#TITLE		-->	曲タイトル
#AUDIO		-->	曲のオーディオファイル(将来改善予定につき、削除の可能性)
#OFFSET		-->	オーディオファイルのオフセット
#BPM		-->	BPMの指定
#NOTES		-->	ノーツの記述部分

その他タグや、詳しい記述形式は別途用意する予定です。

ここから#NOTESの記述形式について解説。

a, STM形式

1000
0100
0010
0001
,
0100
0001
1000
0010
0001
0010
0100
1000
,
0020
0000
0000
0030
;

0 -->	空白
1 -->	単押しノーツ
2 -->	長押しノーツ始点
3 -->	長押しノーツ終点
, -->	1小節の区切り
; -->	譜面終点

・特徴
横にレーンの数文字を置き、縦に1小節の細かさ分伸ばしてコンマで区切る。
見ただけでも、なんとなくどんな譜面か分かる。

・長所と短所
1小節の中が、どのくらい細かいかが一目でわかる。
長押しノーツの長さが分かりやすい。
視覚的に分かりやすい。
細かい譜面だと、行数が増えがち。
レーンに縛られないノーツ(スライド系)に対応しづらい。

b, BSS形式(仮仕様)

[0.0/4,1,1]
[0.1/4,2,1]
[0.2/4,3,1]
[0.3/4,4,1]
[1.0/8,2,1]
[1.1/8,4,1]
[1.2/8,1,1]
[1.3/8,3,1]
[1.4/8,4,1]
[1.5/8,3,1]
[1.6/8,2,1]
[1.7/8,1,1]
[2.0/4,2,3,2.3/4]

・特徴
[time,lane,type,option] <-- これで分かってほしい

・長所と短所
拡張が利きやすい。
行数がSTM形式に比べ、ノーツが少ない&曲が長い程減る。
見た目じゃ分からない。

まとめ:正直一長一短。
でも、エディタがあればこんな解説いらないんですけどね。

3, 駄文
このメモ、7割自分用です。あと3割は自由に見てもらう用もしくはメモリ食う用。
STMにしろBSSにしろ、既存の形式をほぼ真似てます。STMに関してはStepManiaという元ネタの内蔵エディタで作れます。
ただ、それを使うんじゃ(音ゲー作ってる)意味ないし、同じプロジェクト内で作っちゃえば、プレビュー機能にも対応出来るし、独自機能追加しやすいですしおすし。その目的が6割くらい。
残りの4割は趣味です。
独自で形式作らないの？っていうツッコミを受けそうな気もしますが、効率悪くなりそうなのでパス。